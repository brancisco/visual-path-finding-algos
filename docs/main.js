(()=>{"use strict";var t={559:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),a.push([t.id,"body {\n    background: #2C3A47;\n    color: white;\n    margin: 0;\n    /*position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;*/\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n}\n\n#app {\n    position: relative;\n    padding: 10px;\n}\n\n#menu {\n    width: 100%;\n    padding: 10px;\n    margin: -10px 0 0 -10px;\n    background: #CAD3C8;\n}\n\n#menu-inner-wrap, #menu-left, #menu-right {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n#menu-inner-wrap {\n    justify-content: space-between;\n}\n\n\n#menu-left > * {\n    margin: 0 5px 4px 0;\n}\n\n#menu-right > * {\n    margin: 0 10px;\n}\n\n#menu-right > * > p {\n    margin: 5px 0;\n}\n\n#tip {\n    color: black;\n}\n\n.title-text {\n    text-align: center;\n}\n\n.title-text p {\n    margin-bottom: 0;\n}\n\nbutton, select {\n    cursor: pointer;\n    width: 100px;\n    height: 25px;\n    border: 1px solid white;\n    border-radius: 10px;\n    background-color: white;\n}\n\nbutton.selecting-start-node {\n    color: white;\n    background-color: #EAB543;\n}\n\nbutton.selecting-end-node {\n    color: white;\n    background-color: #FC427B;\n}\n\n#fps-wrap {\n    width: 70px;\n    display: block;\n    color: black;\n}\n\n#svg-container {\n    max-width: 1000px;\n    display: block;\n    position: relative;\n    width: 100%;\n    vertical-align: top;\n    margin: auto;\n}\n\n.responsive-svg {\n}\n\n/*svg {\n    pointer-events: none;\n}\n*/\ncircle, rect {\n    /*pointer-events: initial;*/\n    cursor: pointer;\n    transition: fill 1s;\n}\n\n.queued {\n    animation-duration: 0.5s;\n    animation-name: bob-small;\n}\n\n.wall {\n    transition: all 1s;\n    transform: scale(1.2);\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n}\n\n.inpath {\n    animation-duration: 0.7s;\n    animation-name: bob-big;\n}\n\n.open {\n    transition: all 0.5s;\n    transform: scale(1);\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n}\n\n.open:hover {\n    transform: scale(1.3);\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n}\n\n@keyframes bob-small {\n    0% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n\n    50% {\n        transform: scale(0.7);\n        transform-origin: 50% 50%;\n    }\n\n    100% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n}\n\n@keyframes bob-big {\n    0% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n\n    50% {\n        transform: scale(1.2);\n        transform-origin: 50% 50%;\n    }\n\n    100% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n}","",{version:3,sources:["webpack://./src/assets/main.css"],names:[],mappings:"AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,SAAS;IACT;;;;aAIS;IACT,UAAU;IACV,iCAAiC;AACrC;;AAEA;IACI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,8BAA8B;AAClC;;;AAGA;IACI,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,cAAc;IACd,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,YAAY;AAChB;;AAEA;AACA;;AAEA;;;CAGC;AACD;IACI,2BAA2B;IAC3B,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,wBAAwB;IACxB,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,uBAAuB;IACvB,yBAAyB;AAC7B;;AAEA;IACI,wBAAwB;IACxB,uBAAuB;AAC3B;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,yBAAyB;AAC7B;;AAEA;IACI,qBAAqB;IACrB,uBAAuB;IACvB,yBAAyB;AAC7B;;AAEA;IACI;QACI,mBAAmB;QACnB,yBAAyB;QACzB,uBAAuB;IAC3B;;IAEA;QACI,qBAAqB;QACrB,yBAAyB;IAC7B;;IAEA;QACI,mBAAmB;QACnB,yBAAyB;QACzB,uBAAuB;IAC3B;AACJ;;AAEA;IACI;QACI,mBAAmB;QACnB,yBAAyB;QACzB,uBAAuB;IAC3B;;IAEA;QACI,qBAAqB;QACrB,yBAAyB;IAC7B;;IAEA;QACI,mBAAmB;QACnB,yBAAyB;QACzB,uBAAuB;IAC3B;AACJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n\nbody {\n    background: #2C3A47;\n    color: white;\n    margin: 0;\n    /*position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;*/\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n}\n\n#app {\n    position: relative;\n    padding: 10px;\n}\n\n#menu {\n    width: 100%;\n    padding: 10px;\n    margin: -10px 0 0 -10px;\n    background: #CAD3C8;\n}\n\n#menu-inner-wrap, #menu-left, #menu-right {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n#menu-inner-wrap {\n    justify-content: space-between;\n}\n\n\n#menu-left > * {\n    margin: 0 5px 4px 0;\n}\n\n#menu-right > * {\n    margin: 0 10px;\n}\n\n#menu-right > * > p {\n    margin: 5px 0;\n}\n\n#tip {\n    color: black;\n}\n\n.title-text {\n    text-align: center;\n}\n\n.title-text p {\n    margin-bottom: 0;\n}\n\nbutton, select {\n    cursor: pointer;\n    width: 100px;\n    height: 25px;\n    border: 1px solid white;\n    border-radius: 10px;\n    background-color: white;\n}\n\nbutton.selecting-start-node {\n    color: white;\n    background-color: #EAB543;\n}\n\nbutton.selecting-end-node {\n    color: white;\n    background-color: #FC427B;\n}\n\n#fps-wrap {\n    width: 70px;\n    display: block;\n    color: black;\n}\n\n#svg-container {\n    max-width: 1000px;\n    display: block;\n    position: relative;\n    width: 100%;\n    vertical-align: top;\n    margin: auto;\n}\n\n.responsive-svg {\n}\n\n/*svg {\n    pointer-events: none;\n}\n*/\ncircle, rect {\n    /*pointer-events: initial;*/\n    cursor: pointer;\n    transition: fill 1s;\n}\n\n.queued {\n    animation-duration: 0.5s;\n    animation-name: bob-small;\n}\n\n.wall {\n    transition: all 1s;\n    transform: scale(1.2);\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n}\n\n.inpath {\n    animation-duration: 0.7s;\n    animation-name: bob-big;\n}\n\n.open {\n    transition: all 0.5s;\n    transform: scale(1);\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n}\n\n.open:hover {\n    transform: scale(1.3);\n    transform-box: fill-box;\n    transform-origin: 50% 50%;\n}\n\n@keyframes bob-small {\n    0% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n\n    50% {\n        transform: scale(0.7);\n        transform-origin: 50% 50%;\n    }\n\n    100% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n}\n\n@keyframes bob-big {\n    0% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n\n    50% {\n        transform: scale(1.2);\n        transform-origin: 50% 50%;\n    }\n\n    100% {\n        transform: scale(1);\n        transform-origin: 50% 50%;\n        transform-box: fill-box;\n    }\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),n.push(c))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var u=t[s],l=r.base?u[0]+r.base:u[0],c=o[l]||0,h="".concat(l," ").concat(c);o[l]=c+1;var f=e(h),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)n[f].references++,n[f].updater(p);else{var d=i(p,r);r.byIndex=s,n.splice(s,0,{identifier:h,updater:d,references:1})}a.push(h)}return a}function i(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=e(o[a]);n[s].references--}for(var u=r(t,i),l=0;l<o.length;l++){var c=e(o[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=u}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return t[r](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{function t(){}function n(n){return null==n?t:function(){return this.querySelector(n)}}function r(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function i(){return[]}function o(t){return null==t?i:function(){return this.querySelectorAll(t)}}function a(t){return function(){return this.matches(t)}}function s(t){return function(n){return n.matches(t)}}var u=Array.prototype.find;function l(){return this.firstElementChild}var c=Array.prototype.filter;function h(){return Array.from(this.children)}function f(t){return new Array(t.length)}function p(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function d(t){return function(){return t}}function g(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new p(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function m(t,n,e,r,i,o,a){var s,u,l,c=new Map,h=n.length,f=o.length,d=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(d[s]=l=a.call(u,u.__data__,s,n)+"",c.has(l)?i[s]=u:c.set(l,u));for(s=0;s<f;++s)l=a.call(t,o[s],s,o)+"",(u=c.get(l))?(r[s]=u,u.__data__=o[s],c.delete(l)):e[s]=new p(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c.get(d[s])===u&&(i[s]=u)}function y(t){return t.__data__}function v(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function A(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var w="http://www.w3.org/1999/xhtml";const _={svg:"http://www.w3.org/2000/svg",xhtml:w,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function b(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),_.hasOwnProperty(n)?{space:_[n],local:t}:t}function x(t){return function(){this.removeAttribute(t)}}function B(t){return function(){this.removeAttributeNS(t.space,t.local)}}function I(t,n){return function(){this.setAttribute(t,n)}}function C(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function N(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function E(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function k(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function M(t){return function(){this.style.removeProperty(t)}}function T(t,n,e){return function(){this.style.setProperty(t,n,e)}}function S(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function P(t,n){return t.style.getPropertyValue(n)||k(t).getComputedStyle(t,null).getPropertyValue(n)}function q(t){return function(){delete this[t]}}function Y(t,n){return function(){this[t]=n}}function O(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function F(t){return t.trim().split(/^|\s+/)}function L(t){return t.classList||new j(t)}function j(t){this._node=t,this._names=F(t.getAttribute("class")||"")}function R(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function X(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function H(t){return function(){R(this,t)}}function D(t){return function(){X(this,t)}}function V(t,n){return function(){(n.apply(this,arguments)?R:X)(this,t)}}function Q(){this.textContent=""}function U(t){return function(){this.textContent=t}}function z(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Z(){this.innerHTML=""}function $(t){return function(){this.innerHTML=t}}function G(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function W(){this.nextSibling&&this.parentNode.appendChild(this)}function J(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function K(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===w&&n.documentElement.namespaceURI===w?n.createElement(t):n.createElementNS(e,t)}}function tt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function nt(t){var n=b(t);return(n.local?tt:K)(n)}function et(){return null}function rt(){var t=this.parentNode;t&&t.removeChild(this)}function it(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ot(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function at(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function st(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function ut(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function lt(t,n,e){var r=k(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function ct(t,n){return function(){return lt(this,t,n)}}function ht(t,n){return function(){return lt(this,t,n.apply(this,arguments))}}j.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var ft=[null];function pt(t,n){this._groups=t,this._parents=n}function dt(){return new pt([[document.documentElement]],ft)}pt.prototype=dt.prototype={constructor:pt,select:function(t){"function"!=typeof t&&(t=n(t));for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o)for(var a,s,u=e[o],l=u.length,c=i[o]=new Array(l),h=0;h<l;++h)(a=u[h])&&(s=t.call(a,a.__data__,h,u))&&("__data__"in a&&(s.__data__=a.__data__),c[h]=s);return new pt(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return r(t.apply(this,arguments))}}(t):o(t);for(var n=this._groups,e=n.length,i=[],a=[],s=0;s<e;++s)for(var u,l=n[s],c=l.length,h=0;h<c;++h)(u=l[h])&&(i.push(t.call(u,u.__data__,h,l)),a.push(u));return new pt(i,a)},selectChild:function(t){return this.select(null==t?l:function(t){return function(){return u.call(this.children,t)}}("function"==typeof t?t:s(t)))},selectChildren:function(t){return this.selectAll(null==t?h:function(t){return function(){return c.call(this.children,t)}}("function"==typeof t?t:s(t)))},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,s=n[i],u=s.length,l=r[i]=[],c=0;c<u;++c)(o=s[c])&&t.call(o,o.__data__,c,s)&&l.push(o);return new pt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,y);var e=n?m:g,r=this._parents,i=this._groups;"function"!=typeof t&&(t=d(t));for(var o=i.length,a=new Array(o),s=new Array(o),u=new Array(o),l=0;l<o;++l){var c=r[l],h=i[l],f=h.length,p=v(t.call(c,c&&c.__data__,l,r)),A=p.length,w=s[l]=new Array(A),_=a[l]=new Array(A),b=u[l]=new Array(f);e(c,h,w,_,b,p,n);for(var x,B,I=0,C=0;I<A;++I)if(x=w[I]){for(I>=C&&(C=I+1);!(B=_[C])&&++C<A;);x._next=B||null}}return(a=new pt(a,r))._enter=s,a._exit=u,a},enter:function(){return new pt(this._enter||this._groups.map(f),this._parents)},exit:function(){return new pt(this._exit||this._groups.map(f),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),s=new Array(i),u=0;u<a;++u)for(var l,c=e[u],h=r[u],f=c.length,p=s[u]=new Array(f),d=0;d<f;++d)(l=c[d]||h[d])&&(p[d]=l);for(;u<i;++u)s[u]=e[u];return new pt(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=A);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new pt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=b(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?B:x:"function"==typeof n?e.local?E:N:e.local?C:I)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?M:"function"==typeof n?S:T)(t,n,null==e?"":e)):P(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?q:"function"==typeof n?O:Y)(t,n)):this.node()[t]},classed:function(t,n){var e=F(t+"");if(arguments.length<2){for(var r=L(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?V:n?H:D)(e,n))},text:function(t){return arguments.length?this.each(null==t?Q:("function"==typeof t?z:U)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Z:("function"==typeof t?G:$)(t)):this.node().innerHTML},raise:function(){return this.each(W)},lower:function(){return this.each(J)},append:function(t){var n="function"==typeof t?t:nt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,e){var r="function"==typeof t?t:nt(t),i=null==e?et:"function"==typeof e?e:n(e);return this.select((function(){return this.insertBefore(r.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(rt)},clone:function(t){return this.select(t?ot:it)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=at(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?ut:st,r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?ht:ct)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const gt=dt;var mt={value:()=>{}};function yt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new vt(r)}function vt(t){this._=t}function At(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function wt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function _t(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=mt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}vt.prototype=yt.prototype={constructor:vt,on:function(t,n){var e,r=this._,i=At(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=_t(r[e],t.name,n);else if(null==n)for(e in r)r[e]=_t(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=wt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new vt(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const bt=yt;var xt,Bt,It=0,Ct=0,Nt=0,Et=0,kt=0,Mt=0,Tt="object"==typeof performance&&performance.now?performance:Date,St="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return kt||(St(qt),kt=Tt.now()+Mt)}function qt(){kt=0}function Yt(){this._call=this._time=this._next=null}function Ot(t,n,e){var r=new Yt;return r.restart(t,n,e),r}function Ft(){kt=(Et=Tt.now())+Mt,It=Ct=0;try{!function(){Pt(),++It;for(var t,n=xt;n;)(t=kt-n._time)>=0&&n._call.call(void 0,t),n=n._next;--It}()}finally{It=0,function(){for(var t,n,e=xt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:xt=n);Bt=t,jt(r)}(),kt=0}}function Lt(){var t=Tt.now(),n=t-Et;n>1e3&&(Mt-=n,Et=t)}function jt(t){It||(Ct&&(Ct=clearTimeout(Ct)),t-kt>24?(t<1/0&&(Ct=setTimeout(Ft,t-Tt.now()-Mt)),Nt&&(Nt=clearInterval(Nt))):(Nt||(Et=Tt.now(),Nt=setInterval(Lt,1e3)),It=1,St(Ft)))}function Rt(t,n,e){var r=new Yt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Yt.prototype=Ot.prototype={constructor:Yt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Pt():+e)+(null==n?0:+n),this._next||Bt===this||(Bt?Bt._next=this:xt=this,Bt=this),this._call=t,this._time=e,jt()},stop:function(){this._call&&(this._call=null,this._time=1/0,jt())}};var Xt=bt("start","end","cancel","interrupt"),Ht=[];function Dt(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(1!==e.state)return s();for(l in i)if((f=i[l]).name===e.name){if(3===f.state)return Rt(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(Rt((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(u))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ot((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Xt,tween:Ht,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Vt(t,n){var e=Ut(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Qt(t,n){var e=Ut(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Ut(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function zt(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var Zt,$t=180/Math.PI,Gt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Wt(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*$t,skewX:Math.atan(u)*$t,scaleX:a,scaleY:s}}function Jt(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:zt(t,i)},{i:u-2,x:zt(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:zt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:zt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:zt(t,e)},{i:s-2,x:zt(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Kt=Jt((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Gt:Wt(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),tn=Jt((function(t){return null==t?Gt:(Zt||(Zt=document.createElementNS("http://www.w3.org/2000/svg","g")),Zt.setAttribute("transform",t),(t=Zt.transform.baseVal.consolidate())?Wt((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Gt)}),", ",")",")");function nn(t,n){var e,r;return function(){var i=Qt(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function en(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Qt(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function rn(t,n,e){var r=t._id;return t.each((function(){var t=Qt(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Ut(t,r).value[n]}}function on(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function an(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function sn(){}var un=.7,ln=1/un,cn="\\s*([+-]?\\d+)\\s*",hn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",fn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pn=/^#([0-9a-f]{3,8})$/,dn=new RegExp("^rgb\\("+[cn,cn,cn]+"\\)$"),gn=new RegExp("^rgb\\("+[fn,fn,fn]+"\\)$"),mn=new RegExp("^rgba\\("+[cn,cn,cn,hn]+"\\)$"),yn=new RegExp("^rgba\\("+[fn,fn,fn,hn]+"\\)$"),vn=new RegExp("^hsl\\("+[hn,fn,fn]+"\\)$"),An=new RegExp("^hsla\\("+[hn,fn,fn,hn]+"\\)$"),wn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _n(){return this.rgb().formatHex()}function bn(){return this.rgb().formatRgb()}function xn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=pn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Bn(n):3===e?new En(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?In(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?In(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=dn.exec(t))?new En(n[1],n[2],n[3],1):(n=gn.exec(t))?new En(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=mn.exec(t))?In(n[1],n[2],n[3],n[4]):(n=yn.exec(t))?In(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=vn.exec(t))?Sn(n[1],n[2]/100,n[3]/100,1):(n=An.exec(t))?Sn(n[1],n[2]/100,n[3]/100,n[4]):wn.hasOwnProperty(t)?Bn(wn[t]):"transparent"===t?new En(NaN,NaN,NaN,0):null}function Bn(t){return new En(t>>16&255,t>>8&255,255&t,1)}function In(t,n,e,r){return r<=0&&(t=n=e=NaN),new En(t,n,e,r)}function Cn(t){return t instanceof sn||(t=xn(t)),t?new En((t=t.rgb()).r,t.g,t.b,t.opacity):new En}function Nn(t,n,e,r){return 1===arguments.length?Cn(t):new En(t,n,e,null==r?1:r)}function En(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function kn(){return"#"+Tn(this.r)+Tn(this.g)+Tn(this.b)}function Mn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Tn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Sn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new qn(t,n,e,r)}function Pn(t){if(t instanceof qn)return new qn(t.h,t.s,t.l,t.opacity);if(t instanceof sn||(t=xn(t)),!t)return new qn;if(t instanceof qn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new qn(a,s,u,t.opacity)}function qn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Yn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function On(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}on(sn,xn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_n,formatHex:_n,formatHsl:function(){return Pn(this).formatHsl()},formatRgb:bn,toString:bn}),on(En,Nn,an(sn,{brighter:function(t){return t=null==t?ln:Math.pow(ln,t),new En(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?un:Math.pow(un,t),new En(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:kn,formatHex:kn,formatRgb:Mn,toString:Mn})),on(qn,(function(t,n,e,r){return 1===arguments.length?Pn(t):new qn(t,n,e,null==r?1:r)}),an(sn,{brighter:function(t){return t=null==t?ln:Math.pow(ln,t),new qn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?un:Math.pow(un,t),new qn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new En(Yn(t>=240?t-240:t+120,i,r),Yn(t,i,r),Yn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Fn=t=>()=>t;function Ln(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Fn(isNaN(t)?n:t)}const jn=function t(n){var e=function(t){return 1==(t=+t)?Ln:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Fn(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Nn(t)).r,(n=Nn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Ln(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Rn(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),s=new Array(i);for(e=0;e<i;++e)r=Nn(n[e]),o[e]=r.r||0,a[e]=r.g||0,s[e]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}var Xn=Rn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<n-1?t[r+2]:2*o-i;return On((e-r/n)*n,a,i,o,s)}})),Hn=(Rn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],s=t[(r+2)%n];return On((e-r/n)*n,i,o,a,s)}})),/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g),Dn=new RegExp(Hn.source,"g");function Vn(t,n){var e,r,i,o=Hn.lastIndex=Dn.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=Hn.exec(t))&&(r=Dn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:zt(e,r)})),o=Dn.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function Qn(t,n){var e;return("number"==typeof n?zt:n instanceof xn?jn:(e=xn(n))?(n=e,jn):Vn)(t,n)}function Un(t){return function(){this.removeAttribute(t)}}function zn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Zn(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function $n(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Gn(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttribute(t)}}function Wn(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Jn(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Kn(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function te(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Kn(t,i)),e}return i._value=n,i}function ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Jn(t,i)),e}return i._value=n,i}function ee(t,n){return function(){Vt(this,t).delay=+n.apply(this,arguments)}}function re(t,n){return n=+n,function(){Vt(this,t).delay=n}}function ie(t,n){return function(){Qt(this,t).duration=+n.apply(this,arguments)}}function oe(t,n){return n=+n,function(){Qt(this,t).duration=n}}function ae(t,n){if("function"!=typeof n)throw new Error;return function(){Qt(this,t).ease=n}}function se(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Vt:Qt;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}var ue=gt.prototype.constructor;function le(t){return function(){this.style.removeProperty(t)}}function ce(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function he(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&ce(t,o,e)),r}return o._value=n,o}function fe(t){return function(n){this.textContent=t.call(this,n)}}function pe(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&fe(r)),n}return r._value=t,r}var de=0;function ge(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function me(){return++de}var ye=gt.prototype;ge.prototype=function(t){return gt().transition(t)}.prototype={constructor:ge,select:function(t){var e=this._name,r=this._id;"function"!=typeof t&&(t=n(t));for(var i=this._groups,o=i.length,a=new Array(o),s=0;s<o;++s)for(var u,l,c=i[s],h=c.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=c[p])&&(l=t.call(u,u.__data__,p,c))&&("__data__"in u&&(l.__data__=u.__data__),f[p]=l,Dt(f[p],e,r,p,f,Ut(u,r)));return new ge(a,this._parents,e,r)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,i=r.length,a=[],s=[],u=0;u<i;++u)for(var l,c=r[u],h=c.length,f=0;f<h;++f)if(l=c[f]){for(var p,d=t.call(l,l.__data__,f,c),g=Ut(l,e),m=0,y=d.length;m<y;++m)(p=d[m])&&Dt(p,n,e,m,d,g);a.push(d),s.push(l)}return new ge(a,s,n,e)},selectChild:ye.selectChild,selectChildren:ye.selectChildren,filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,s=n[i],u=s.length,l=r[i]=[],c=0;c<u;++c)(o=s[c])&&t.call(o,o.__data__,c,s)&&l.push(o);return new ge(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new ge(a,this._parents,this._name,this._id)},selection:function(){return new ue(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=me(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=Ut(a,n);Dt(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ge(r,this._parents,t,e)},call:ye.call,nodes:ye.nodes,node:ye.node,size:ye.size,empty:ye.empty,each:ye.each,on:function(t,n){var e=this._id;return arguments.length<2?Ut(this.node(),e).on.on(t):this.each(se(e,t,n))},attr:function(t,n){var e=b(t),r="transform"===e?tn:Qn;return this.attrTween(t,"function"==typeof n?(e.local?Wn:Gn)(e,r,rn(this,"attr."+t,n)):null==n?(e.local?zn:Un)(e):(e.local?$n:Zn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=b(t);return this.tween(e,(r.local?te:ne)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Kt:Qn;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=P(this,t),a=(this.style.removeProperty(t),P(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,le(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=P(this,t),s=e(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=P(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=n(r=a,s))}}(t,r,rn(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,s="end."+a;return function(){var u=Qt(this,t),l=u.on,c=null==u.value[a]?o||(o=le(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=P(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,he(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(rn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,pe(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Ut(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?nn:en)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ee:re)(n,t)):Ut(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ie:oe)(n,t)):Ut(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ae(n,t)):Ut(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Qt(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};e.each((function(){var e=Qt(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(s),n._.interrupt.push(s),n._.end.push(u)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:ye[Symbol.iterator]};var ve={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ae(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}gt.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},gt.prototype.transition=function(t){var n,e;t instanceof ge?(n=t._id,t=t._name):(n=me(),(e=ve).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&Dt(a,t,n,l,s,e||Ae(a,n));return new ge(r,this._parents,t,n)};const{abs:we,max:_e,min:be}=Math;function xe(t){return{type:t}}function Be(t){return"string"==typeof t?new pt([[document.querySelector(t)]],[document.documentElement]):new pt([[t]],ft)}function Ie(t,n){if(t=function(t){let n;for(;n=t.sourceEvent;)t=n;return t}(t),void 0===n&&(n=t.currentTarget),n){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}}return[t.pageX,t.pageY]}["w","e"].map(xe),["n","s"].map(xe),["n","w","e","s","nw","ne","sw","se"].map(xe);const Ce={passive:!1},Ne={capture:!0,passive:!1};function Ee(t){t.stopImmediatePropagation()}function ke(t){t.preventDefault(),t.stopImmediatePropagation()}const Me=t=>()=>t;function Te(t,{sourceEvent:n,subject:e,target:r,identifier:i,active:o,x:a,y:s,dx:u,dy:l,dispatch:c}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},subject:{value:e,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:i,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:a,enumerable:!0,configurable:!0},y:{value:s,enumerable:!0,configurable:!0},dx:{value:u,enumerable:!0,configurable:!0},dy:{value:l,enumerable:!0,configurable:!0},_:{value:c}})}function Se(t){return!t.ctrlKey&&!t.button}function Pe(){return this.parentNode}function qe(t,n){return null==n?{x:t.x,y:t.y}:n}function Ye(){return navigator.maxTouchPoints||"ontouchstart"in this}function Oe(t,n,e){this.k=t,this.x=n,this.y=e}Te.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t},Oe.prototype={constructor:Oe,scale:function(t){return 1===t?this:new Oe(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Oe(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Oe(1,0,0),Oe.prototype;class Fe{}class Le extends Fe{}class je extends Fe{}class Re extends Fe{}class Xe extends Fe{}class He{constructor(t,n){this.x=t,this.y=n,this.visited=!1,this.queued=!1,this.prev=null,this.dist=Number.POSITIVE_INFINITY,this.score=Number.POSITIVE_INFINITY,this.type=Xe,this.inpath=!1}setType(t){this.type=t}setInPath(t){this.inpath=t}setDist(t){this.dist=t}setScore(t){this.score=t}setPrev(t){this.prev=t}setVisited(t){this.visited=t}setQueued(t){this.queued=t}}class De{constructor(t,n=[]){this.nodes=n,this.visited=[],this.queue=t,this.nodes.forEach((t=>{t.type===Le&&(t.dist=0),this.qpush(t)})),this.diagonal=!0}reset(){this.queue.empty();for(let t of this.nodes)t.type!==Le&&(t.visited=!1,t.queued=!1,t.prev=null,t.dist=Number.POSITIVE_INFINITY,t.score=Number.POSITIVE_INFINITY,t.inpath=!1,t.type=t.type===Re?Xe:t.type),this.qpush(t);this.visited=[]}getNodeBy(t){if("POSITION"===t){let[t,n,e]=Object.values(arguments).slice(1,3);return e=!!e,this.nodes.find((r=>!(r.x!==t||r.y!==n||e&&r.visited)))}if("TYPE"===t){const t=arguments[1];return this.nodes.find((n=>n.type===t))}}isLRNeighbor(t,n,e){let r=[1,-1];return r.map((n=>n+t)).includes(e.x)&&n==e.y||r.map((t=>t+n)).includes(e.y)&&t===e.x}isDiagonalNeighbor(t,n,e){let r=[1,-1];return r.map((n=>n+t)).includes(e.x)&&r.map((t=>t+n)).includes(e.y)||r.map((t=>t+n)).includes(e.y)&&r.map((n=>n+t)).includes(e.x)}isNeighbor(t,n,e){return e.type===Re?-1:this.isLRNeighbor(t,n,e)?1:this.diagonal&&this.isDiagonalNeighbor(t,n,e)?1.4142135624:-1}getNeighbors(t,n){let e=[];return this.queue.heap.forEach((r=>{let i=this.isNeighbor(t,n,r);i>=0&&e.push({node:r,dist:i})})),e.sort(((t,n)=>t.dist>n.dist?1:-1))}setStartNode(t,n){let e=this.getNodeBy("TYPE",Le);e&&(e.visited=!1,e.dist=Number.POSITIVE_INFINITY,e.score=Number.POSITIVE_INFINITY,e.type=Xe,e.queued=!1);let r=this.getNodeBy("POSITION",t,n);r.setVisited(!0),r.setDist(0),r.setScore(0),r.setType(Le)}setFinishNode(t,n){let e=this.getNodeBy("TYPE",je);e&&(e.type=Xe),this.getNodeBy("POSITION",t,n).type=je,this.reset()}setNodeType(t,n,e){this.getNodeBy("POSITION",t,n).type=e,this.reset()}push(t){this.nodes.push(t),this.reset()}qpush(t){t.queued=!0,this.queue.insert(t)}qpop(){const t=this.queue.pop();return t&&(t.queued=!1),t}getNodes(){return[...this.queue.heap,...this.visited].sort(((t,n)=>{let e=t.x-n.x;return 0!==e?e:t.y-n.y}))}}class Ve{constructor(t,n){this.graph=t,this.heuristic=this.setHeuristic(n),this.startNode=this.graph.getNodeBy("TYPE",Le),this.finishNode=this.graph.getNodeBy("TYPE",je),this.pathFound=!1,this.path=[],this.pathIndex=0,console.log(this.graph.queue)}setHeuristic(t){return"euclidean"===t?t=>Math.sqrt(Math.pow(t.x-this.finishNode.x,2)+Math.pow(t.y-this.finishNode.y,2)):"manhattan"===t?t=>Math.abs(t.x-this.finishNode.x,2)+Math.abs(t.y-this.finishNode.y,2):void 0}isSame(t,n){return t.x===n.x&&t.y===n.y}reset(){this.graph.reset(),this.startNode=this.graph.getNodeBy("TYPE",Le),this.finishNode=this.graph.getNodeBy("TYPE",je),this.graph.nodes.forEach((t=>this.graph.qpush(t))),this.pathFound=!1,this.path=[],this.pathIndex=0,console.log(this.graph.queue)}step(){if(this.pathFound){let t=this.path[this.path.length-1-this.pathIndex];return this.pathIndex++,!t||(t.inpath=!0,!1)}{const t=this.graph.qpop();if(this.graph.visited.push(t),t.visited=!0,null===t)return!0;const n=this.graph.getNeighbors(t.x,t.y);for(let e of n){let n=t.dist+e.dist;if(n<e.node.dist&&(e.node.dist=n,e.node.score=e.node.dist+this.heuristic(e.node),e.node.prev=t),this.isSame(e.node,this.finishNode))return this.finishNode=e.node,this.pathFound=!0,this.path=this.getPath(),!1}return this.graph.queue._heapify(),!1}}getPath(){if(null===this.finishNode.prev)return[];let t=this.finishNode.prev,n=[this.finishNode];for(;t;)n.push(t),t=t.prev;return n}}class Qe{constructor(t="MIN"){this.mode=t,this.heap=[],this._compareFunction=this._getCompareFunction()}pop(){if(!this.heap.length)return null;this._swap(this.heap,0,this.heap.length-1);const t=this.heap.pop();return this._heapify(),t}peek(){return this.heap.length?this.heap[0]:null}insert(t){this.heap.push(t),this.heap.length>1&&this._heapify()}empty(){this.heap=[]}_getter(t){return this.heap[t]}_swap(t,n,e){let r=t[n];t[n]=t[e],t[e]=r}_getParentIndex(t){return 0===t?null:Math.ceil(t/2)-1}_heapify(){const t=this.heap.length-1;if(!(t<=0))for(let n=Math.ceil((t-1)/2);n>=0;n--)this._siftDown(n,t)}_getCompareFunction(){if("MIN"===this.mode)return(t,n)=>t<n;if("MAX"===this.mode)return(t,n)=>t>n;throw new Error("Mode must be MIN or MAX")}_siftDown(t,n){let e=t;for(;2*e+1<=n;){const t=2*e+1,r=t+1;let i=t;if(r<=n&&!this._compareFunction(this._getter(t),this._getter(r))&&(i=r),!this._compareFunction(this._getter(i),this._getter(e)))return;this._swap(this.heap,i,e),e=i}}}var Ue=e(379),ze=e.n(Ue),Ze=e(795),$e=e.n(Ze),Ge=e(569),We=e.n(Ge),Je=e(565),Ke=e.n(Je),tr=e(216),nr=e.n(tr),er=e(589),rr=e.n(er),ir=e(559),or={};or.styleTagTransform=rr(),or.setAttributes=Ke(),or.insert=We().bind(null,"head"),or.domAPI=$e(),or.insertStyleElement=nr(),ze()(ir.Z,or),ir.Z&&ir.Z.locals&&ir.Z.locals;const ar=24,sr=Xn(["#FC427B","#FFFFFF","#EAB543"]);var ur=!1,lr=!1,cr=0,hr="dijkstra",fr="euclidean",pr=[4,5],dr=[20,5],gr=[0,0,0,0,0,0,0,0,0,0];document.getElementById("app");const mr=document.getElementById("play-button");mr.innerHTML="Play",mr.onclick=function(){ur=!ur,mr.innerHTML=ur?"Pause":"Play",xr(20)};const yr=document.getElementById("reset-button");yr.innerHTML="Reset",yr.onclick=function(){ur=!1,mr.innerHTML=ur?"Pause":"Play",mr.removeAttribute("disabled"),br=_r(hr,fr),Tr()};const vr=document.getElementById("set-goals-button");vr.innerHTML="Set Goals",vr.onclick=function(){ur=!1,mr.innerHTML=ur?"Pause":"Play",br=_r(hr,fr),Tr(),cr=2,this.classList.toggle("selecting-start-node"),this.innerHTML="Set Start"};const Ar=document.getElementById("select-heuristic");Ar.onchange=function(){fr=this.value,br=_r(hr,fr),Tr()},document.getElementById("select-algo").onchange=function(){"astar"==(hr=this.value)?Ar.removeAttribute("hidden"):Ar.setAttribute("hidden",!0),br=_r(hr,fr),Tr()};const wr=document.getElementById("fps-meter");function _r(t,n){let e=new Qe;e._getter="dijkstra"===t?function(t){return this.heap[t].dist}:"astar"===t?function(t){return this.heap[t].score}:void 0;var r=new De(e,[]);for(let t=0;t<11;t++)for(let n=0;n<25;n++)r.push(new He(n,t));return r.setStartNode(...pr),r.setFinishNode(...dr),new Ve(r,n)}wr.innerHTML=0,document.getElementById("tip").appendChild((()=>{let t=document.createElement("p");return t.innerHTML="Click a node and drag to add walls.",t})());var br=_r(hr,fr);function xr(t){const n=performance.now();if(Tr(),br.step())return ur=!1,mr.innerHTML="Finished",void mr.setAttribute("disabled",!0);ur&&setTimeout((function(){gr.push(1/((performance.now()-n)/1e3)),gr.splice(0,1);let t=Math.round(gr.reduce(((t,n)=>t+n),0)/10);wr.innerHTML=t,xr(20)}),t)}const Br=Be("#svg-container").append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 600 300").attr("class","responsive-svg").on("touchstart touchend",kr),Ir=Br.append("g"),Cr=Br.append("g");function Nr(t,n,e){if(!0!==ur)if("start"===t&&cr){const t=n.subject;2===cr?(vr.classList.toggle("selecting-start-node"),vr.classList.toggle("selecting-end-node"),vr.innerHTML="Set Finish",pr=[t.x,t.y],br.graph.setStartNode(...pr)):1===cr&&(vr.classList.toggle("selecting-end-node"),vr.innerHTML="Set Goals",dr=[t.x,t.y],br.graph.setFinishNode(...dr)),br.reset(),Tr(),cr--}else lr="end"!==t}function Er(t,n){lr&&!n.visited&&n.type===Xe&&(n.type=Re,n.queued=!1,Tr())}function kr(t,n){t.preventDefault(),"touchstart"===t.type?lr=!0:"touchend"===t.type&&(lr=!1),["pointerenter","pointerout"].includes(t.type)&&lr&&!n.visited&&n.type===Xe&&(n.type=Re,Tr())}var Mr=function(){var t,n,e,r,i=Se,o=Pe,a=qe,s=Ye,u={},l=bt("start","drag","end"),c=0,h=0;function f(t){t.on("mousedown.drag",p).filter(s).on("touchstart.drag",m).on("touchmove.drag",y,Ce).on("touchend.drag touchcancel.drag",v).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(a,s){if(!r&&i.call(this,a,s)){var u=A(this,o.call(this,a,s),a,s,"mouse");u&&(Be(a.view).on("mousemove.drag",d,Ne).on("mouseup.drag",g,Ne),function(t){var n=t.document.documentElement,e=Be(t).on("dragstart.drag",ke,Ne);"onselectstart"in n?e.on("selectstart.drag",ke,Ne):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(a.view),Ee(a),e=!1,t=a.clientX,n=a.clientY,u("start",a))}}function d(r){if(ke(r),!e){var i=r.clientX-t,o=r.clientY-n;e=i*i+o*o>h}u.mouse("drag",r)}function g(t){Be(t.view).on("mousemove.drag mouseup.drag",null),function(t,n){var e=t.document.documentElement,r=Be(t).on("dragstart.drag",null);n&&(r.on("click.drag",ke,Ne),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(t.view,e),ke(t),u.mouse("end",t)}function m(t,n){if(i.call(this,t,n)){var e,r,a=t.changedTouches,s=o.call(this,t,n),u=a.length;for(e=0;e<u;++e)(r=A(this,s,t,n,a[e].identifier,a[e]))&&(Ee(t),r("start",t,a[e]))}}function y(t){var n,e,r=t.changedTouches,i=r.length;for(n=0;n<i;++n)(e=u[r[n].identifier])&&(ke(t),e("drag",t,r[n]))}function v(t){var n,e,i=t.changedTouches,o=i.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),n=0;n<o;++n)(e=u[i[n].identifier])&&(Ee(t),e("end",t,i[n]))}function A(t,n,e,r,i,o){var s,h,p,d=l.copy(),g=Ie(o||e,n);if(null!=(p=a.call(t,new Te("beforestart",{sourceEvent:e,target:f,identifier:i,active:c,x:g[0],y:g[1],dx:0,dy:0,dispatch:d}),r)))return s=p.x-g[0]||0,h=p.y-g[1]||0,function e(o,a,l){var m,y=g;switch(o){case"start":u[i]=e,m=c++;break;case"end":delete u[i],--c;case"drag":g=Ie(l||a,n),m=c}d.call(o,t,new Te(o,{sourceEvent:a,subject:p,target:f,identifier:i,active:m,x:g[0]+s,y:g[1]+h,dx:g[0]-y[0],dy:g[1]-y[1],dispatch:d}),r)}}return f.filter=function(t){return arguments.length?(i="function"==typeof t?t:Me(!!t),f):i},f.container=function(t){return arguments.length?(o="function"==typeof t?t:Me(t),f):o},f.subject=function(t){return arguments.length?(a="function"==typeof t?t:Me(t),f):a},f.touchable=function(t){return arguments.length?(s="function"==typeof t?t:Me(!!t),f):s},f.on=function(){var t=l.on.apply(l,arguments);return t===l?f:t},f.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,f):Math.sqrt(h)},f}().on("start",(function(t){Nr("start",t,Be(this))})).on("drag",(function(t){Nr("drag",t)})).on("end",(function(t){Nr("end",t,Be(this))}));function Tr(){Cr.selectAll("circle").data(br.graph.getNodes()).join("circle").attr("cx",(t=>13+t.x*ar)).attr("cy",(t=>13+t.y*ar)).attr("r",8).classed("visited",(t=>t.visited)).classed("queued",(t=>t.dist<Number.POSITIVE_INFINITY)).classed("inpath",(t=>t.inpath)).classed("wall",(t=>t.type===Re)).classed("open",(t=>t.type===Xe&&!t.visited&&!t.queued&&!t.inpath)).attr("fill",((t,n)=>t.type===Le?"#EAB543":t.type===je?"#FC427B":t.type===Re?"#BDC581":t.inpath?"#1B9CFC":t.visited?"#9AECDB":t.dist<Number.POSITIVE_INFINITY?"#D6A2E8":"#b2bec3")).call(Mr).on("mouseenter",Er).on("mouseout",Er).on("pointerenter pointerout",kr),Ir.selectAll("line").data(br.graph.getNodes()).join("line").attr("x1",(t=>13+t.x*ar)).attr("y1",(t=>13+t.y*ar)).attr("x2",(t=>13+(t.prev?t.prev.x:t.x)*ar)).attr("y2",(t=>13+(t.prev?t.prev.y:t.y)*ar)).attr("stroke-width",(t=>t.inpath&&t.prev&&t.prev.inpath?3:1)).attr("stroke",(t=>{if(t.inpath&&t.prev&&t.prev.inpath){const n=br.path.findIndex((n=>n.x===t.x&&n.y===t.y));return sr(n/br.path.length)}return"white"}))}Tr()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,